#!/bin/bash

# ShellHacks 2025 - Docker Entrypoint Script
# This script starts both the backend and frontend services

set -e

echo "üéâ Starting ShellHacks 2025 Ops Mesh Demo in Docker"
echo "=================================================="

# Function to handle cleanup
cleanup() {
    echo "üõë Shutting down services..."
    kill $BACKEND_PID $FRONTEND_PID 2>/dev/null || true
    wait
    echo "‚úÖ Services stopped"
    exit 0
}

# Set up signal handlers
trap cleanup SIGTERM SIGINT

# Create database directory if it doesn't exist
mkdir -p /app/data

# Initialize database
echo "üîß Setting up database..."
cd /app
python -c "
from app.core.database import engine, Base
Base.metadata.create_all(bind=engine)
print('‚úÖ Database initialized successfully')
"

# Start backend server
echo "üöÄ Starting backend server..."
cd /app
python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 1 &
BACKEND_PID=$!

# Wait for backend to be ready
echo "‚è≥ Waiting for backend to start..."
for i in {1..30}; do
    if curl -f http://localhost:8000/health >/dev/null 2>&1; then
        echo "‚úÖ Backend is ready"
        break
    fi
    if [ $i -eq 30 ]; then
        echo "‚ùå Backend failed to start"
        exit 1
    fi
    sleep 1
done

# Start frontend server
echo "üé® Starting frontend server..."
cd /app/frontend
npm run dev &
FRONTEND_PID=$!

# Wait for frontend to be ready
echo "‚è≥ Waiting for frontend to start..."
for i in {1..30}; do
    if curl -f http://localhost:3000 >/dev/null 2>&1; then
        echo "‚úÖ Frontend is ready"
        break
    fi
    if [ $i -eq 30 ]; then
        echo "‚ùå Frontend failed to start"
        exit 1
    fi
    sleep 1
done

echo ""
echo "üéä Demo is running successfully!"
echo "=================================================="
echo "üåê Available URLs:"
echo "   ‚Ä¢ Main Dashboard: http://localhost:3000"
echo "   ‚Ä¢ Enhanced Dashboard: http://localhost:3000/enhanced-dashboard"
echo "   ‚Ä¢ Agent Demo: http://localhost:3000/agent-demo"
echo "   ‚Ä¢ Live Dashboard: http://localhost:3000/live-dashboard"
echo "   ‚Ä¢ Patient Flow: http://localhost:3000/patient-flow"
echo "   ‚Ä¢ API Documentation: http://localhost:8000/docs"
echo "   ‚Ä¢ Health Check: http://localhost:8000/health"
echo ""
echo "‚ú® Features Available:"
echo "   ‚Ä¢ Visual agent status monitoring"
echo "   ‚Ä¢ Patient management with status updates"
echo "   ‚Ä¢ Queue management with dequeue operations"
echo "   ‚Ä¢ Real-time statistics and activity logs"
echo "   ‚Ä¢ A2A protocol workflow testing"
echo "   ‚Ä¢ Agent-to-agent communication"
echo ""
echo "üõë Press Ctrl+C to stop the demo"
echo "=================================================="

# Wait for processes
wait $BACKEND_PID $FRONTEND_PID
